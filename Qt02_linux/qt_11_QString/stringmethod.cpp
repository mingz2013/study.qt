#include "stringmethod.h"



stringMethod::stringMethod(QObject *parent) :
    QObject(parent)
{
    QString str = "0123456789";
    qDebug() << "str------------->" << str;

    /**
     *---------------------------------------------------------------------------------------------
     *mid()函数接受两个参数，
     *第一个是起始位置，
     *第二个是取串的长度。
     *如果省略第二个参数，则会从起始位置截取到末尾。*/
    QString str1 = str.mid(3, 4);            // str1 == ""
    QString str2 = str.mid(3);               // str2 == ""
    qDebug() << "str.mid(3, 4)-------->" << str1;
    qDebug() << "str.mid(3)----------->" << str2;

    /**
     *-------------------------------------------------------------------------------------------------
     *函数left()和rigt()类似，
     *都接受一个int类型的参数n，都是对字符串进行截取。
     *不同之处在于，
     *left()函数从左侧截取n个字符，
     *而right()从右侧开始截取。*/
    str1 = str.left(3);
    str2 = str.right(3);
    qDebug() << "str.left(3)-------->" << str1;
    qDebug() << "str.right(3)----------->" << str2;

    /**
     *-------------------------------------------------------------------------------------------------
     *函数indexOf()
     *返回字符串的起始位置，如果找不到返回-1，
     *第一个参数是要查找的字符串，
     *第二个参数是从第几个开始查找，默认为0*/
    QString x = "sticky question";
    QString y = "sti";
    qDebug() << "x--------------->" << x;
    qDebug() << "y--------------->" << y;
    qDebug() << "x.indexOf(y)--------------->" << x.indexOf(y);               // returns 0
    qDebug() << "x.indexOf(y, 1)------------>" << x.indexOf(y, 1);            // returns 10
    qDebug() << "x.indexOf(y, 10)----------->" << x.indexOf(y, 10);           // returns 10
    qDebug() << "x.indexOf(y, 11)----------->" << x.indexOf(y, 11);           // returns -1


    /**
     *-------------------------------------------------------------------------------------------------
     *函数startsWith()和endsWith()可以检测字符串是不是以某个特定的串开始或结尾，
     *接收一个字符串参数
     *返回一个bool值
     *例如：*/
    QString url = "http://www.baidu.com/logo.png";
    if (url.startsWith("http:") && url.endsWith(".png"))
    {
        qDebug() << "url------------------>" << url;
        qDebug() << "url.startsWith(\"http:\")----------->" << url.startsWith("http:");
        qDebug() << "url.endsWith(\".png\")----------->" << url.endsWith(".png");
    }

    /**
     *----------------------------------------------------------------------------------------------------
     *replace()函数，
     *功能：字符串替换功能，
     **/
    //str = "abcdefghijklmnopqrstuvwxyz";
    //str.replace();
    qDebug() << "这里还没有想好怎么写，还没由看懂";

    /**
     *-------------------------------------------------------------------------------------------------------
     *trimmed()函数去除字符串两侧的空白字符(注意，空白字符包括空格、Tab以及换行符，而不仅仅是空格)
     **/
    str = "  xxx ";
    //str.trimmed();
    qDebug() << "str------------->" << str;
    qDebug() << "str.trimmed()--->" << str.trimmed();

    /**
     *-------------------------------------------------------------------------------------------------------
     *toLower()和toUpper()函数会将字符串转换成小写大写字符串
     **/
    str = "abceQFUGIUhgiuhgGUI4235;";
    qDebug() << "str----------------------->" << str;
    qDebug() << "str.toLower()------------->" << str.toLower();
    qDebug() << "str.toUpper()------------->" << str.toUpper();


    /**
     *------------------------------------------------------------------------------------------------------------
     *remove()和insert()函数提供了删除和插入字符串的能力*/
    str = "abcdefghijklmnopqrstuvwxyz";
    qDebug() << "str-------------------------->" << str;
    qDebug() << "str.remove(1, 2)------------->" << str.remove(1, 2);   // 从第一个字符开始，删除两个长度
    qDebug() << "str.remove(\"stu\")------------>" << str.remove("stu");  // 删除指定字符串



    /**
     *---------------------------------------------------------------------------------------------------------------
     *simplified()函数可以将串中的所有连续的空白字符替换成一个，并且把两端的空白字符去除，例如"   \t   ”会返回一个空格" "。*/
    str = "  30560  36 65 ";
    qDebug() << "str-------------------------->" << str;
    qDebug() << "str.simplified()------------->" << str.simplified();


}
